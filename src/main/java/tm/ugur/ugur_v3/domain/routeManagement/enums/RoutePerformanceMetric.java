package tm.ugur.ugur_v3.domain.routeManagement.enums;

import lombok.Getter;

@Getter
public enum RoutePerformanceMetric {
    ON_TIME_PERFORMANCE("–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", "%", 85.0, 95.0, true),
    RIDERSHIP("–ü–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫", "—á–µ–ª/–¥–µ–Ω—å", 100, 1000, true),
    LOAD_FACTOR("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏", "%", 60.0, 85.0, true),
    AVERAGE_SPEED("–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å", "–∫–º/—á", 15.0, 35.0, true),
    FUEL_EFFICIENCY("–¢–æ–ø–ª–∏–≤–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ª/100–∫–º", 25.0, 35.0, false),
    CUSTOMER_SATISFACTION("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–±–∞–ª–ª", 3.5, 4.5, true),
    BREAKDOWN_FREQUENCY("–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª–æ–º–æ–∫", "—Ä–∞–∑/–º–µ—Å—è—Ü", 0, 2, false),
    COST_PER_KM("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–º", "—Ä—É–±/–∫–º", 50.0, 100.0, false),
    REVENUE_PER_KM("–î–æ—Ö–æ–¥ –∑–∞ –∫–º", "—Ä—É–±/–∫–º", 80.0, 150.0, true),
    ACCESSIBILITY_SCORE("–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", "–±–∞–ª–ª", 70, 100, true);

    private final String displayName;
    private final String unit;
    private final double targetMin;
    private final double targetMax;
    private final boolean higherIsBetter;

    RoutePerformanceMetric(String displayName, String unit, double targetMin,
                           double targetMax, boolean higherIsBetter) {
        this.displayName = displayName;
        this.unit = unit;
        this.targetMin = targetMin;
        this.targetMax = targetMax;
        this.higherIsBetter = higherIsBetter;
    }

    public boolean isWithinTarget(double value) {
        return value >= targetMin && value <= targetMax;
    }

    public boolean isExcellent(double value) {
        if (higherIsBetter) {
            return value >= targetMax * 0.95;
        } else {
            return value <= targetMin * 1.05;
        }
    }

    public boolean isPoor(double value) {
        if (higherIsBetter) {
            return value < targetMin * 0.8;
        } else {
            return value > targetMax * 1.2;
        }
    }

    public PerformanceLevel getPerformanceLevel(double value) {
        if (isExcellent(value)) return PerformanceLevel.EXCELLENT;
        if (isWithinTarget(value)) return PerformanceLevel.GOOD;
        if (isPoor(value)) return PerformanceLevel.POOR;
        return PerformanceLevel.BELOW_TARGET;
    }

    public String formatValue(double value) {
        return String.format("%.1f %s", value, unit);
    }

    @Override
    public String toString() {
        return displayName + " (" + unit + ")";
    }

    public enum PerformanceLevel {
        EXCELLENT("–û—Ç–ª–∏—á–Ω—ã–π", "üü¢"),
        GOOD("–•–æ—Ä–æ—à–∏–π", "üü°"),
        BELOW_TARGET("–ù–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ", "üü†"),
        POOR("–ü–ª–æ—Ö–æ–π", "üî¥");

        private final String name;
        private final String indicator;

        PerformanceLevel(String name, String indicator) {
            this.name = name;
            this.indicator = indicator;
        }

        @Override
        public String toString() {
            return indicator + " " + name;
        }
    }
}